/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { EventEmitter, EventEmitterInterface } from "../EventEmitter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "contractId",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "performer",
        type: "address",
      },
    ],
    name: "BuildContractConfirmed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "contractId",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "busyBuilder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "setBusy",
        type: "bool",
      },
    ],
    name: "BuildContractCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "contractId",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "performer",
        type: "address",
      },
    ],
    name: "BuildContractDeclined",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "contractId",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newBuilder",
        type: "address",
      },
    ],
    name: "BuilderChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "DepositSuccess",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "performer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "RewardBuilder",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212203db4eb1570c798d498763ebea69ca148ae0aa3a2b97222712bd45f5a7bd50bc964736f6c63430008040033";

export class EventEmitter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EventEmitter> {
    return super.deploy(overrides || {}) as Promise<EventEmitter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): EventEmitter {
    return super.attach(address) as EventEmitter;
  }
  connect(signer: Signer): EventEmitter__factory {
    return super.connect(signer) as EventEmitter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EventEmitterInterface {
    return new utils.Interface(_abi) as EventEmitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EventEmitter {
    return new Contract(address, _abi, signerOrProvider) as EventEmitter;
  }
}
